const { Telegraf } = require('telegraf');
const mineflayer = require('mineflayer');
const readline = require('readline');

const telegramBot = new Telegraf('7546864528:AAEnWbpPmuMtsuEKZ1IJ0MRlXpqa0znVAT0');
const bot = new Telegraf('-1002651805346');

const Vec3 = require('vec3');
const fs = require('fs');



const originalJSONParse = JSON.parse;
JSON.parse = function (text, reviver) {
  if (typeof text !== 'string') return originalJSONParse(text, reviver);
  try {
    return originalJSONParse(text, reviver);
  } catch (e) {
    const fixed = text.replace(/([{,])\s*([a-zA-Z0-9_]+)\s*:/g, '$1"$2":');
    return originalJSONParse(fixed, reviver);
  }
};

// üìÇ –î–∞–Ω–Ω—ã–µ
const blacklist = ['–¢–µ—Å—Ç', '–¢–µ—Å—Ç2'];
let joinDates = loadJoinDates();
let notifiedPlayers = {};

const RECONNECT_DELAY = 30000;
const HOME_INTERVAL = 30000;
const LOOK_INTERVAL = 50;
const ADVERT_INTERVALS = [180000, 360000, 540000];

let mcBot;
let intervals = [];

function loadJoinDates() {
  try {
    return JSON.parse(fs.readFileSync('joinDates.json', 'utf8'));
  } catch {
    return {};
  }
}

function saveJoinDates(data) {
  fs.writeFileSync('joinDates.json', JSON.stringify(data, null, 2));
}

function clearAllIntervals() {
  for (const id of intervals) clearInterval(id);
  intervals = [];
}

function reconnect() {
  console.log(`üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${RECONNECT_DELAY / 1000} —Å–µ–∫—É–Ω–¥...`);
  setTimeout(() => createBot(), RECONNECT_DELAY);
}

function createBot() {
  mcBot = mineflayer.createBot({
    host: 'mc.mineblaze.net',
    port: 25565,
    username: 'Dragon_Bot',
    password: '271236',
    version: '1.16.5'
  });



  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
    terminal: true
  });

  rl.setPrompt("> ");
  rl.prompt();
  rl.on('line', (input) => {
    bot.chat(input);
    rl.prompt();
  });





  mcBot.on('message', (message) => {
    const msg = message.toString();
    if (msg.includes('‚Ä∫ –ò–≥—Ä–æ–∫ [–í–ª–∞–¥–µ–ª–µ—Ü] ‚òë Aferna_Mageusy –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∏ –ø–æ—à–µ–ª —Ä–∞–±–æ—Ç–∞—Ç—å')) {
      mcBot.chat('/cc &a&l> &b&l&n–í–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞&a&l < &#FF0000&lAferna_Mageusy &f&l–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∏ –ø–æ—à—ë–ª —Ä–∞–±–æ—Ç–∞—Ç—å!')
    }
  })

  mcBot.on('message', (message) => {
    const msg = message.toString();
    if (msg.includes('‚Ä∫ –ò–≥—Ä–æ–∫ [–û–ø–∫–∞] Aferna_Mageusy2 –∑–∞—à–µ–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä.')) {
      mcBot.chat('/cc &a&l> &b&l&n–í–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞ —Å —Ç–≤–∏–Ω–∫–∞&a&l < &#FF0000&lAferna_Mageusy2 &f&l–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∏ –ø–æ—à—ë–ª —Ä–∞–±–æ—Ç–∞—Ç—å!')
    }
  })


  mcBot.on('message', (message) => {
    const msg = message.toString();
    if (msg.includes('‚Ä∫ –ò–≥—Ä–æ–∫ [–ê–Ω—Ç–∏–ì—Ä–∏—Ñ–µ—Ä] vaseniz –∑–∞—à–µ–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä.')) {
      mcBot.chat('/cc &a&l> –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –í–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∞–Ω–∞ &a&l< &#FF0000&lvaseniz &f&l–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∏ –ø–æ—à—ë–ª —Ä–∞–±–æ—Ç–∞—Ç—å!')
    }
  })


  mcBot.once('spawn', () => {
      console.log('‚úÖ –ë–æ—Ç –≤–æ—à—ë–ª –≤ –∏–≥—Ä—É!');
      mcBot.chat('/reg 271236');
      mcBot.chat('/login 271236');
      mcBot.chat('/s3');
      mcBot.chat('/warp n_l');

      // üìå –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–æ–º–æ–π
      intervals.push(setInterval(() => {
        mcBot.chat('/warp n_l');
      }, HOME_INTERVAL));

      // üì£ –†–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messages = [
        '!&4&lAnti&3&lChebrin &f&l- —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–ª–∞–Ω, &e&l—ç—Ç–æ —É–¥–æ–±–Ω—ã–π –æ—Ç–¥—ã—Ö –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π! &b&l–°–∫–æ—Ä–µ–µ –ø–æ–¥–∞–≤–∞–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∫–ª–∞–Ω–∞ –∏ –ø–æ–º–æ–≥–∞–π —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–º—É –∫–ª–∞–Ω—É! &F&L/warp AC&e&l –∏–ª–∏ &f&l/c join AntiChebrin.',
        '!&a&l–î–∞–≤–Ω–æ –∏—Å–∫–∞–ª–∏ —É–¥–æ–±–Ω—ã–π –∫–ª–∞–Ω –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π? &4&l–¢–æ–≥–¥–∞ –≤–∞–º –∫ –Ω–∞–º! &b&l–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–ª–∞–Ω–∞ –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–ª–∞–Ω–∞. &9&l–°–∫–æ—Ä–µ–µ –≤—Å—Ç—É–ø–∞–π –∫ –Ω–∞–º –≤ –∫–ª–∞–Ω! &f&l/warp AC&e&l –∏–ª–∏ &f&l/c join AntiChebrin.',
        '!&c&l–î–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –±—ã—Ç—å –≤ —É—é—Ç–Ω–æ–º –∫–ª–∞–Ω–µ? –¢–æ–≥–¥–∞ —Ç–µ–±–µ –≤ –∫–ª–∞–Ω &4&lAnti&3&lChebrin! &b&l–£ –Ω–∞—Å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤—Å—ë! &6&l–ñ–¥—ë–º —Ç–µ–±—è –Ω–∞ &f&l/warp AC&e&l –∏–ª–∏ &f&l/c join AntiChebrin.'
      ];
      messages.forEach((msg, i) => {
        intervals.push(setInterval(() => mcBot.chat(msg), ADVERT_INTERVALS[i]));
      });

      // üëÅÔ∏è –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –±–ª–∏–∂–∞–π—à–∏–º –∏–≥—Ä–æ–∫–æ–º
      intervals.push(setInterval(() => {
        let nearest = null, minDist = Infinity;
        for (const id in mcBot.entities) {
          const e = mcBot.entities[id];
          if (e.type === 'player' && e.username !== mcBot.username) {
            const dist = mcBot.entity.position.distanceTo(e.position);
            if (dist < minDist) {
              minDist = dist;
              nearest = e;
            }
          }
        }
        if (nearest) {
          mcBot.lookAt(nearest.position.offset(0, nearest.height || 1.2, 0));
        }
      }, LOOK_INTERVAL));
    });


    mcBot.on('message', (jsonMsg) => {
      const message = jsonMsg.toString();
      console.log(message);
      const matchRequest = message.match(/–ò–≥—Ä–æ–∫ (.+) –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≤–∞—à –∫–ª–∞–Ω/);
      if (matchRequest) {
        const originalName = matchRequest[1];
        const lowerName = originalName.toLowerCase();

        console.log(`üì• –ó–∞—è–≤–∫–∞ –æ—Ç: ${originalName}`);
        const isBlacklisted = blacklist.map(n => n.toLowerCase()).includes(lowerName);

        if (isBlacklisted) {
          mcBot.chat(`/c deny ${originalName}`);
          mcBot.chat(`/c deny ${originalName}`);
          console.log(`‚ùå ${originalName} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
          notifiedPlayers[lowerName] = true;
        } else {
          mcBot.chat(`/c accept ${originalName}`);
          mcBot.chat(`/c accept ${originalName}`);
          console.log(`‚úÖ ${originalName} –ø—Ä–∏–Ω—è—Ç –≤ –∫–ª–∞–Ω.`);

          if (!joinDates[lowerName]) {
            const now = new Date();
            const formatted = `${now.getDate().toString().padStart(2, '0')}.${(now.getMonth() + 1).toString().padStart(2, '0')}.${now.getFullYear()}/${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
            joinDates[lowerName] = formatted;
            saveJoinDates(joinDates);

            console.log(`[JOIN] ${originalName} –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª–∞–Ω. –î–∞—Ç–∞: ${formatted}`);
            setTimeout(() => {
              mcBot.chat(`/cc &a&l–ü—Ä–∏–≤–µ—Ç&f ${originalName}! –¢—ã –≤—Å—Ç—É–ø–∏–ª –≤ &c&l—Å–∞–º—ã–π&f –ª—É—á—à–∏–π –∫–ª–∞–Ω "&4&l·¥Ä…¥·¥õ…™&3&l·¥Ñ ú·¥á ô Ä…™…¥&f"! –ù–∞–ø–∏—à–∏ &a/cc –±o—Ç –ø—Ä–∏–≤–µ—Ç&f!`);
            }, 1000);
          }
        }
      }
    });

    mcBot.on('chat', (username, message) => {
      if (message.includes('mineblaze.net/antibot')) {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞. –û–∂–∏–¥–∞–Ω–∏–µ –∫–∏–∫–∞...');
      }
    })

    mcBot.on('kicked', (reason) => {
      console.log('‚õî –ë–æ—Ç –±—ã–ª –∫–∏–∫–Ω—É—Ç:', reason);
      clearAllIntervals();
      reconnect();
    });

    mcBot.on('end', () => {
      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–µ—Ä–≤–∞–Ω–æ');
      clearAllIntervals();
      reconnect();
    });

    mcBot.on('error', (err) => console.error('–û—à–∏–±–∫–∞:', err));
    mcBot._client.on('error', (err) => console.error('–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:', err))
}
createBot();




